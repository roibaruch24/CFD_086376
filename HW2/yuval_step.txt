void step(double *Q,double *W,double *s,double *s2,double *rspec, double *qv, double *dd,double *drr,double *drp,double const epse
	,double const epsi,double *A,double *B,double *C,double *D,double *xi_x,double *xi_y,double *etta_x,double *etta_y,double *J,
	double const gamma,int const imax,int const jmax,double const M0,int const ni,int const nj,double const dt)
{
	RHS(Q,W,s,xi_x,xi_y,etta_x,etta_y,J,gamma,imax,jmax,ni,nj,dt);
	smooth(Q,s,J,xi_x,xi_y,etta_x,etta_y,ni,nj,s2,rspec,qv,dd,epse,gamma,M0,dt);
	//xi inversions
	for (int j = 1; j < nj - 1; j++)
	{
		LHSX(Q,A,B,C,xi_x,xi_y,gamma,j,dt,ni,nj);
		smoothx(Q,xi_x,xi_y,ni,nj,A,B,C,j,J,drr,drp,rspec,qv,dd,epsi,gamma,M0,dt);
		for (int k = 0; k < 4; k++)
		{
			for (int i = 0; i < ni-1; i++)
			{
				D[offset2d(i,k,ni)] = s[offset3d(i,j,k,ni,4)];
			}
		}
		btri4s(A,B,C,D,ni,1,1);
		for (int k = 0; k < 4; k++)
		{
			for (int i = 0; i < ni-1; i++)
			{
				s[offset3d(i,j,k,ni,4)] = D[offset2d(i,k,ni)];
			}
		}
	}
	// etta inversions
	for (int i = 1; i < ni - 1; i++)
	{
		LHSY(Q,A,B,C,etta_x,etta_y,gamma,i,dt,ni,nj);
		smoothy(Q,etta_x,etta_y,ni,nj,A,B,C,i,J,drr,drp,rspec,qv,dd,epsi,gamma,M0,dt);
		for (int k = 0; k < 4; k++)
		{
			for (int j = 0; j < nj-1; j++)
			{
				D[offset2d(j,k,nj)] = s[offset3d(i,j,k,ni,4)];
			}
		}
		btri4s(A,B,C,D,nj,1,1);
		for (int k = 0; k < 4; k++)
		{
			for (int j = 0; j < nj-1; j++)
			{
				s[offset3d(i,j,k,ni,4)] = D[offset2d(j,k,nj)];
			}
		}
	}
	//updating the solution
	for (int i = 1;i < imax;i++)
	{
		for(int j = 1;j < jmax;j++)
		{
			for (int k = 0; k <=3;k++)
			{
				Q[offset3d(i,j,k,ni,nj)] += s[offset3d(i,j,k,ni,nj)]*J[offset2d(i,j,ni)];
			}
		}
	}
}