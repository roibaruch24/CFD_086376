void calc_jac_mat(double const Q0,double const Q1,double const Q2,double const Q3,double *jac,double const k_x,
    double const k_y,double const gamma,int const i,int const ni)
{
    double const gamma1 = gamma-1;
    double const gamma2 = gamma-2;
    double const u = Q1/Q0;
    double const v = Q2/Q0;
    double const phi2 = 0.5*gamma1*(pow(u,2)+pow(v,2));
    double const theta = k_x*u+k_y*v;
    double const beta = gamma*Q3/Q0-phi2;
    jac[offset3d(i,0,0,ni,4)] = 0;
    jac[offset3d(i,0,1,ni,4)] = k_x;
    jac[offset3d(i,0,2,ni,4)] = k_y;
    jac[offset3d(i,0,3,ni,4)] = 0;
    jac[offset3d(i,1,0,ni,4)] = k_x*phi2-u*theta;
    jac[offset3d(i,1,1,ni,4)] = theta-k_x*gamma2*u;
    jac[offset3d(i,1,2,ni,4)] = k_x*u-gamma1*k_x*v;
    jac[offset3d(i,1,3,ni,4)] = k_x*gamma1;
    jac[offset3d(i,2,0,ni,4)] = k_y*phi2-v*theta;
    jac[offset3d(i,2,1,ni,4)] = k_x*v-k_y*gamma1*u;
    jac[offset3d(i,2,2,ni,4)] = theta-k_y*gamma2*v;
    jac[offset3d(i,2,2,ni,4)] = k_y*gamma1;
    jac[offset3d(i,3,0,ni,4)] = theta*(2*phi2-gamma*Q3/Q0);
    jac[offset3d(i,3,1,ni,4)] = k_x*beta-gamma1*u*theta;
    jac[offset3d(i,3,2,ni,4)] = k_y*beta-gamma1*v*theta;
    jac[offset3d(i,3,3,ni,4)] = gamma*theta;
}
void LHSX(double const *Q,double *A,double *B,double *C,double const *xi_x,double const *xi_y,double const gamma,
    int const j,double const dt,int const ni,int const nj)
{
    for (int i = 0;i < ni;i++)
    {
        double const Q0 = Q[offset3d(i,j,0,ni,nj)];double const Q1 = Q[offset3d(i,j,1,ni,nj)];
        double const Q2 = Q[offset3d(i,j,2,ni,nj)];double const Q3 = Q[offset3d(i,j,3,ni,nj)];
        double k_x = xi_x[offset2d(i,j,ni)];double k_y = xi_y[offset2d(i,j,ni)];
        calc_jac_mat(Q0,Q1,Q2,Q3,B,k_x,k_y,gamma,i,ni);
    }
    for (int n = 0; n < 4; n++)
    {
        for (int m = 0; m < 4; m++)
        {
            for (int i = 1;i < ni-1;i++)
            {
                A[offset3d(i,m,n,ni,4)]= -0.5*B[offset3d(i-1,m,n,ni,4)]*dt;
                C[offset3d(i,m,n,ni,4)]= 0.5*B[offset3d(i+1,m,n,ni,4)]*dt;
            }
        }
    }
    for (int i = 0 ;i < ni-1 ;i++)
    {
        for (int m = 0 ;m < 4 ;m++)
        {
        	for (int n = 0 ; n < 4 ;n++)
        	{
        		if (m!=n)
        		{
        			B[offset3d(i,m,n,ni,4)] = 0;
        		}
        		if (m==n)
        		{
        			B[offset3d(i,m,n,ni,4)] = 1;
        		}
        	}
        }
    }
}